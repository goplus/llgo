package cmptest

import (
	"encoding/json"
	"log"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/goplus/llgo/chore/gogensig/config"
	"github.com/goplus/llgo/chore/gogensig/convert"
	"github.com/goplus/llgo/chore/gogensig/processor"
	"github.com/goplus/llgo/chore/gogensig/unmarshal"
	"github.com/goplus/llgo/chore/gogensig/visitor"
	cppgtypes "github.com/goplus/llgo/chore/llcppg/types"
)

func RunTest(t *testing.T, pkgName string, isCpp bool, symbolEntries []config.SymbolEntry, cppgConf *cppgtypes.Config, originalCode, expectedOutput string) {
	t.Helper()

	tempDir, err := os.MkdirTemp("", "gogensig-test")
	if err != nil {
		t.Fatal("failed to create temp dir")
	}
	defer os.RemoveAll(tempDir)

	symbolpath, err := CreateAndWriteTempSymbFile(symbolEntries)
	if err != nil {
		t.Fatal(err)
	}
	cfgPath, err := CreateCppgConfFile(cppgConf)
	if err != nil {
		t.Fatal(err)
	}
	astConvert, err := convert.NewAstConvert(&convert.AstConvertConfig{
		PkgName:   pkgName,
		SymbFile:  symbolpath,
		CfgFile:   cfgPath,
		OutputDir: tempDir,
	})
	if err != nil {
		t.Fatal(err)
	}

	// The result file will be generated in a directory based on the package name.
	// For example, if the package name is "typeref", the result file will be generated in a directory named "typeref".
	rootDir := filepath.Join(tempDir, pkgName)
	files, err := os.ReadDir(rootDir)
	if err != nil {
		t.Fatalf("Fail to read temp dir: %v", err)
	}

	for _, file := range files {
		log.Println("Generated file:", file.Name())
	}

	p := processor.NewDocFileSetProcessor([]visitor.DocVisitor{astConvert})

	// Fetch the signature file
	// The signature file is generated by llcppsigfetch
	bytes, err := config.Sigfetch(originalCode, true, isCpp)
	if err != nil {
		t.Fatal(err)
	}

	inputdata, err := unmarshal.UnmarshalFileSet(bytes)
	if err != nil {
		t.Fatal(err)
	}

	p.ProcessFileSet(inputdata)

	// Note: The converted file path for llcppsigfetch's temp header file is temp.h,
	genFilePath := filepath.Join(rootDir, "temp.go")
	content, err := os.ReadFile(genFilePath)
	if err != nil {
		t.Fatalf("Fail to read generated file: %v", err)
	}

	if strings.TrimSpace(expectedOutput) != strings.TrimSpace(string(content)) {
		t.Errorf("does not match expected.\nExpected:\n%s\nGot:\n%s", expectedOutput, string(content))
	}
}

func CreateAndWriteTempSymbFile(entries []config.SymbolEntry) (string, error) {
	return CreateJSONFile("llcppg.symb.json", entries)
}

func CreateCppgConfFile(config *cppgtypes.Config) (string, error) {
	return CreateJSONFile("llcppg.cfg", config)
}

func CreateJSONFile(filename string, data interface{}) (string, error) {
	filePath := filepath.Join(os.TempDir(), filename)

	file, err := os.Create(filePath)
	if err != nil {
		return "", err
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	return filePath, encoder.Encode(data)
}
